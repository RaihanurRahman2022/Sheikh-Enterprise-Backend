### Sheikh Enterprise Inventory Management System Documentation

## Table of Contents

1. [System Overview](#system-overview)
2. [Architecture](#architecture)
3. [Features and Modules](#features-and-modules)
4. [Technical Implementation](#technical-implementation)
5. [User Guide](#user-guide)
6. [API Documentation](#api-documentation)
7. [Database Schema](#database-schema)
8. [Deployment Guide](#deployment-guide)


## System Overview

The Sheikh Enterprise Inventory Management System is a comprehensive web application designed to manage inventory, sales, purchases, suppliers, and shops. The system provides a user-friendly interface for tracking products, recording sales and purchases, managing suppliers and shops, and analyzing business performance.

### Key Features

- **Dashboard Analytics**: Real-time overview of sales, purchases, and inventory metrics
- **Product Management**: Add, edit, view, and delete products with detailed information
- **Sales Management**: Create and manage sales invoices with line items
- **Purchase Management**: Track purchases from suppliers with detailed records
- **Supplier Management**: Maintain supplier information and purchase history
- **Shop Management**: Manage multiple shop locations under the same company
- **User Authentication**: Secure login system with role-based access control
- **Responsive Design**: Mobile-friendly interface that works on all devices


## Architecture

The system is built using a modern web application architecture:

```mermaid
System Architecture.download-icon {
            cursor: pointer;
            transform-origin: center;
        }
        .download-icon .arrow-part {
            transition: transform 0.35s cubic-bezier(0.35, 0.2, 0.14, 0.95);
             transform-origin: center;
        }
        button:has(.download-icon):hover .download-icon .arrow-part, button:has(.download-icon):focus-visible .download-icon .arrow-part {
          transform: translateY(-1.5px);
        }
        #mermaid-diagram-r25q{font-family:var(--font-geist-sans);font-size:12px;fill:#000000;}#mermaid-diagram-r25q .error-icon{fill:#552222;}#mermaid-diagram-r25q .error-text{fill:#552222;stroke:#552222;}#mermaid-diagram-r25q .edge-thickness-normal{stroke-width:1px;}#mermaid-diagram-r25q .edge-thickness-thick{stroke-width:3.5px;}#mermaid-diagram-r25q .edge-pattern-solid{stroke-dasharray:0;}#mermaid-diagram-r25q .edge-thickness-invisible{stroke-width:0;fill:none;}#mermaid-diagram-r25q .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-diagram-r25q .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-diagram-r25q .marker{fill:#666;stroke:#666;}#mermaid-diagram-r25q .marker.cross{stroke:#666;}#mermaid-diagram-r25q svg{font-family:var(--font-geist-sans);font-size:12px;}#mermaid-diagram-r25q p{margin:0;}#mermaid-diagram-r25q .label{font-family:var(--font-geist-sans);color:#000000;}#mermaid-diagram-r25q .cluster-label text{fill:#333;}#mermaid-diagram-r25q .cluster-label span{color:#333;}#mermaid-diagram-r25q .cluster-label span p{background-color:transparent;}#mermaid-diagram-r25q .label text,#mermaid-diagram-r25q span{fill:#000000;color:#000000;}#mermaid-diagram-r25q .node rect,#mermaid-diagram-r25q .node circle,#mermaid-diagram-r25q .node ellipse,#mermaid-diagram-r25q .node polygon,#mermaid-diagram-r25q .node path{fill:#eee;stroke:#999;stroke-width:1px;}#mermaid-diagram-r25q .rough-node .label text,#mermaid-diagram-r25q .node .label text{text-anchor:middle;}#mermaid-diagram-r25q .node .katex path{fill:#000;stroke:#000;stroke-width:1px;}#mermaid-diagram-r25q .node .label{text-align:center;}#mermaid-diagram-r25q .node.clickable{cursor:pointer;}#mermaid-diagram-r25q .arrowheadPath{fill:#333333;}#mermaid-diagram-r25q .edgePath .path{stroke:#666;stroke-width:2.0px;}#mermaid-diagram-r25q .flowchart-link{stroke:#666;fill:none;}#mermaid-diagram-r25q .edgeLabel{background-color:white;text-align:center;}#mermaid-diagram-r25q .edgeLabel p{background-color:white;}#mermaid-diagram-r25q .edgeLabel rect{opacity:0.5;background-color:white;fill:white;}#mermaid-diagram-r25q .labelBkg{background-color:rgba(255, 255, 255, 0.5);}#mermaid-diagram-r25q .cluster rect{fill:hsl(0, 0%, 98.9215686275%);stroke:#707070;stroke-width:1px;}#mermaid-diagram-r25q .cluster text{fill:#333;}#mermaid-diagram-r25q .cluster span{color:#333;}#mermaid-diagram-r25q div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:var(--font-geist-sans);font-size:12px;background:hsl(-160, 0%, 93.3333333333%);border:1px solid #707070;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-diagram-r25q .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#000000;}#mermaid-diagram-r25q .flowchart-link{stroke:hsl(var(--gray-400));stroke-width:1px;}#mermaid-diagram-r25q .marker,#mermaid-diagram-r25q marker,#mermaid-diagram-r25q marker *{fill:hsl(var(--gray-400))!important;stroke:hsl(var(--gray-400))!important;}#mermaid-diagram-r25q .label,#mermaid-diagram-r25q text,#mermaid-diagram-r25q text>tspan{fill:hsl(var(--black))!important;color:hsl(var(--black))!important;}#mermaid-diagram-r25q .background,#mermaid-diagram-r25q rect.relationshipLabelBox{fill:hsl(var(--white))!important;}#mermaid-diagram-r25q .entityBox,#mermaid-diagram-r25q .attributeBoxEven{fill:hsl(var(--gray-150))!important;}#mermaid-diagram-r25q .attributeBoxOdd{fill:hsl(var(--white))!important;}#mermaid-diagram-r25q .label-container,#mermaid-diagram-r25q rect.actor{fill:hsl(var(--white))!important;stroke:hsl(var(--gray-400))!important;}#mermaid-diagram-r25q line{stroke:hsl(var(--gray-400))!important;}#mermaid-diagram-r25q :root{--mermaid-font-family:var(--font-geist-sans);}HTTP RequestsAPI CallsCRUD OperationsClient ComponentsAuthenticationClient BrowserNext.js FrontendBackend APIDatabaseAuth Service
```

### Technology Stack

- **Frontend**: Next.js 14 (App Router), React, TypeScript, Tailwind CSS
- **UI Components**: shadcn/ui component library
- **State Management**: React Context API
- **Authentication**: JWT-based authentication
- **Styling**: Tailwind CSS with custom theme (emerald-gold)
- **Charts**: Recharts for data visualization
- **PDF Generation**: jsPDF and html2canvas


## Features and Modules

### Authentication Module

- Login with username/password
- JWT token-based authentication
- Role-based access control
- Session persistence


### Dashboard Module

- Sales summary (today, monthly, yearly)
- Products sold metrics
- Sales trend charts
- Monthly performance analytics


### Product Management Module

- Product listing with sorting and filtering
- Add/edit product with detailed attributes
- View product details
- Delete products with confirmation
- Import/export product data via CSV


### Sales Management Module

- Sales invoice listing
- Create new sales with multiple line items
- Apply discounts to sales
- View and edit sales invoices
- Generate PDF invoices
- Sales analytics


### Purchase Management Module

- Purchase order listing
- Create new purchases from suppliers
- Track purchase details and costs
- View and edit purchase orders
- Generate PDF purchase orders


### Supplier Management Module

- Supplier listing with contact information
- Add/edit supplier details
- View supplier information
- Delete suppliers with confirmation


### Shop Management Module

- Shop listing with location details
- Add/edit shop information
- Assign shops to companies
- View shop details


## Technical Implementation

### Project Structure

```plaintext
app/
├── (auth)/
│   └── login/
├── (dashboard)/
│   ├── dashboard/
│   ├── products/
│   ├── sales/
│   ├── purchases/
│   ├── suppliers/
│   └── shops/
├── globals.css
├── layout.tsx
└── page.tsx
components/
├── auth/
├── layout/
│   ├── Layout.tsx
│   ├── Sidebar.tsx
│   └── Topbar.tsx
└── ui/
contexts/
├── AuthContext.tsx
lib/
├── api.ts
├── auth.ts
├── types.ts
└── utils.ts
```

### Authentication Flow

1. User enters credentials on login page
2. Credentials are validated against the backend
3. On successful authentication, JWT token is stored in localStorage
4. AuthContext provides authentication state to the entire application
5. Protected routes check for valid authentication
6. Token expiration is handled automatically


### Data Flow

1. UI components trigger API calls through the api.ts module
2. API functions handle data fetching, creation, updates, and deletion
3. Data is passed to components via props or context
4. Components render data and provide user interaction
5. User actions trigger state updates and API calls


### Responsive Design

- Mobile-first approach with Tailwind CSS
- Adaptive layouts for different screen sizes
- Card view for mobile devices, table view for desktop
- Collapsible sidebar for space efficiency


## User Guide

### Login

1. Navigate to the login page
2. Enter your username and password
3. Click "Sign in"


### Dashboard Navigation

- Use the sidebar to navigate between different modules
- On mobile, tap the menu icon to show/hide the sidebar
- The topbar shows breadcrumbs for navigation hierarchy


### Managing Products

1. Navigate to the Products page
2. View the list of products with sorting and filtering options
3. Click "Add Product" to create a new product
4. Fill in the product details and save
5. Use the action buttons to view, edit, or delete products


### Creating a Sale

1. Navigate to the Sales page
2. Click "New Sale" to create a sales invoice
3. Enter customer and shop information
4. Add products to the sale by clicking "Add Item"
5. Apply discounts if needed
6. Add remarks and save the sale
7. View or print the invoice from the view page


### Recording a Purchase

1. Navigate to the Purchases page
2. Click "New Purchase" to create a purchase order
3. Select the supplier
4. Add products to the purchase by clicking "Add Item"
5. Enter payment information
6. Add remarks and save the purchase
7. View or print the purchase order from the view page


### Managing Suppliers

1. Navigate to the Suppliers page
2. View the list of suppliers
3. Click "Add Supplier" to create a new supplier
4. Fill in the supplier details and save
5. Use the action buttons to view, edit, or delete suppliers


### Managing Shops

1. Navigate to the Shops page
2. View the list of shops
3. Click "Add Shop" to create a new shop
4. Select the company and fill in shop details
5. Use the action buttons to view, edit, or delete shops


## API Documentation

### Authentication API

```plaintext
POST /api/auth/login
- Request: { username, password }
- Response: { user, token }
```

### Products API

```plaintext
GET /api/products
- Response: Product[]

GET /api/products/:id
- Response: Product

POST /api/products
- Request: ProductData
- Response: Product

PUT /api/products/:id
- Request: ProductData
- Response: Product

DELETE /api/products/:id
- Response: { success: boolean }
```

### Sales API

```plaintext
GET /api/sales
- Response: SalesInvoice[]

GET /api/sales/:id
- Response: SalesInvoice

POST /api/sales
- Request: SalesInvoiceData
- Response: SalesInvoice

PUT /api/sales/:id
- Request: SalesInvoiceData
- Response: SalesInvoice

DELETE /api/sales/:id
- Response: { success: boolean }
```

### Purchases API

```plaintext
GET /api/purchases
- Response: PurchaseInvoice[]

GET /api/purchases/:id
- Response: PurchaseInvoice

POST /api/purchases
- Request: PurchaseInvoiceData
- Response: PurchaseInvoice

PUT /api/purchases/:id
- Request: PurchaseInvoiceData
- Response: PurchaseInvoice

DELETE /api/purchases/:id
- Response: { success: boolean }
```

### Suppliers API

```plaintext
GET /api/suppliers
- Response: Supplier[]

GET /api/suppliers/:id
- Response: Supplier

POST /api/suppliers
- Request: SupplierData
- Response: Supplier

PUT /api/suppliers/:id
- Request: SupplierData
- Response: Supplier

DELETE /api/suppliers/:id
- Response: { success: boolean }
```

### Shops API

```plaintext
GET /api/shops
- Response: Shop[]

GET /api/shops/:id
- Response: Shop

POST /api/shops
- Request: ShopData
- Response: Shop

PUT /api/shops/:id
- Request: ShopData
- Response: Shop

DELETE /api/shops/:id
- Response: { success: boolean }
```

### Companies API

```plaintext
GET /api/companies
- Response: Company[]

GET /api/companies/:id
- Response: Company

POST /api/companies
- Request: CompanyData
- Response: Company

PUT /api/companies/:id
- Request: CompanyData
- Response: Company

DELETE /api/companies/:id
- Response: { success: boolean }
```

### Analytics API

```plaintext
GET /api/analytics/summary
- Response: SalesSummary

GET /api/analytics/daily-sales
- Response: DailySales[]
```

## Database Schema

### Users Table

| Field | Type | Description
|-----|-----|-----
| id | VARCHAR(36) | Primary key
| username | VARCHAR(50) | Unique username
| password | VARCHAR(255) | Hashed password
| email | VARCHAR(100) | User email
| role | VARCHAR(20) | User role (admin, user)
| created_at | TIMESTAMP | Creation timestamp
| updated_at | TIMESTAMP | Last update timestamp


### Products Table

| Field | Type | Description
|-----|-----|-----
| product_id | VARCHAR(36) | Primary key
| code | VARCHAR(50) | Product code
| name | VARCHAR(100) | Product name
| style | VARCHAR(50) | Product style
| master_category | VARCHAR(50) | Main category
| sub_category | VARCHAR(50) | Sub-category
| color | VARCHAR(50) | Product color
| size | VARCHAR(20) | Product size
| purchase_price | DECIMAL(10,2) | Purchase price
| sales_price | DECIMAL(10,2) | Sales price
| sales_type | VARCHAR(50) | Sales type
| update_datetime | TIMESTAMP | Last update timestamp
| updated_by | VARCHAR(50) | User who updated
| remarks | TEXT | Additional notes


### Sales_Invoices Table

| Field | Type | Description
|-----|-----|-----
| invoice_id | VARCHAR(36) | Primary key
| shop_id | VARCHAR(36) | Foreign key to Shops
| customer_id | VARCHAR(36) | Customer identifier
| sales_by | VARCHAR(50) | Salesperson name
| sale_datetime | TIMESTAMP | Sale timestamp
| total | DECIMAL(10,2) | Total amount
| discount | DECIMAL(10,2) | Discount amount
| discount_by | VARCHAR(50) | Who authorized discount
| remarks | TEXT | Additional notes


### Sales_Details Table

| Field | Type | Description
|-----|-----|-----
| detail_id | VARCHAR(36) | Primary key
| invoice_id | VARCHAR(36) | Foreign key to Sales_Invoices
| product_id | VARCHAR(36) | Foreign key to Products
| quantity | INT | Quantity sold
| sales_price | DECIMAL(10,2) | Price at time of sale
| subtotal | DECIMAL(10,2) | Line item total


### Suppliers Table

| Field | Type | Description
|-----|-----|-----
| supplier_id | VARCHAR(36) | Primary key
| name | VARCHAR(100) | Supplier name
| address | TEXT | Supplier address
| phone | VARCHAR(20) | Contact phone
| email | VARCHAR(100) | Contact email
| remarks | TEXT | Additional notes


### Purchases Table

| Field | Type | Description
|-----|-----|-----
| purchase_invoice_id | VARCHAR(36) | Primary key
| supplier_id | VARCHAR(36) | Foreign key to Suppliers
| purchase_datetime | TIMESTAMP | Purchase timestamp
| total | DECIMAL(10,2) | Total amount
| payment_type | VARCHAR(50) | Payment method
| entry_by | VARCHAR(50) | User who entered
| remarks | TEXT | Additional notes


### Purchase_Details Table

| Field | Type | Description
|-----|-----|-----
| detail_id | VARCHAR(36) | Primary key
| purchase_invoice_id | VARCHAR(36) | Foreign key to Purchases
| product_id | VARCHAR(36) | Foreign key to Products
| quantity | INT | Quantity purchased
| purchase_price | DECIMAL(10,2) | Price at time of purchase


### Companies Table

| Field | Type | Description
|-----|-----|-----
| company_id | VARCHAR(36) | Primary key
| name | VARCHAR(100) | Company name
| address | TEXT | Company address
| phone | VARCHAR(20) | Contact phone
| email | VARCHAR(100) | Contact email
| slogan | VARCHAR(255) | Company slogan
| remarks | TEXT | Additional notes


### Shops Table

| Field | Type | Description
|-----|-----|-----
| shop_id | VARCHAR(36) | Primary key
| company_id | VARCHAR(36) | Foreign key to Companies
| name | VARCHAR(100) | Shop name
| address | TEXT | Shop address
| phone | VARCHAR(20) | Contact phone
| email | VARCHAR(100) | Contact email
| manager_name | VARCHAR(100) | Manager name
| manager_phone | VARCHAR(20) | Manager phone
| remarks | TEXT | Additional notes


## Deployment Guide

### Prerequisites

- Node.js 18.x or higher
- npm or yarn package manager
- Database server (MySQL, PostgreSQL, or MongoDB)
- Web server (Nginx or Apache) for production


### Development Setup

1. Clone the repository:

```plaintext
git clone https://github.com/your-username/inventory-management.git
cd inventory-management
```


2. Install dependencies:

```plaintext
npm install
```


3. Set up environment variables:

```plaintext
cp .env.example .env.local
```

Edit `.env.local` with your database credentials and other settings.


4. Run the development server:

```plaintext
npm run dev
```


5. Access the application at [http://localhost:3000](http://localhost:3000)


### Production Deployment

1. Build the application:

```plaintext
npm run build
```


2. Start the production server:

```plaintext
npm start
```


3. For optimal performance, deploy behind a reverse proxy like Nginx:

```plaintext
server {
  listen 80;
  server_name your-domain.com;

  location / {
    proxy_pass http://localhost:3000;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
  }
}
```


4. Set up SSL with Let's Encrypt for secure connections.
5. Configure database backups and monitoring.


### Docker Deployment

1. Build the Docker image:

```plaintext
docker build -t inventory-management .
```


2. Run the container:

```plaintext
docker run -p 3000:3000 -e DATABASE_URL=your_db_url inventory-management
```


3. For production, use Docker Compose to manage the application and database:

```yaml
version: '3'
services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/inventory
    depends_on:
      - db
  db:
    image: postgres:14
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=inventory
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
```




---

This documentation provides a comprehensive overview of the Sheikh Enterprise Inventory Management System. For further assistance or to report issues, please contact the system administrator.